#!/usr/bin/python3
#
# Catches information about a change whenever it been merged.
# Triggered by the gerrit change-merged hook. 
#
# The script assumes the following arguments:
# change-merged --change <change id> --change-url <change url> \
#     --change-owner <change owner> --project <project name> --branch <branch> \
#     --submitter <submitter> --commit <sha1> --newrev <sha1>

import subprocess
import argparse
import json

from account import Account
from change import Change
from utils import parse_json

def print_args(args):
    """ Print arguments as a dict-like view. """
    print("\nThere is a new merged change:\n")
    for key, values in sorted(vars(args).items()):
        print(key + "\t: " + values)

def query_change(change_id):
    """ Get gerrit change info as a json list. """
    output_file = 'result.json'
    query_cmd = 'ssh -p 29418 name@xxx gerrit query \
        --format=JSON --current-patch-set ' + change_id + ' --files > ' + \
        output_file
    try:
        subprocess.check_output(query_cmd, stderr = subprocess.STDOUT, \
            shell = True)
    except subprocess.TimeoutExpired:
        print("Communication timeout expired.")
    else:
        try:
            # read the output file
            with open(output_file) as f_obj:
                json_list = f_obj.readlines()
        except FileNotFuondError:
            print("Sorry, the file " + output_file + " does not exist.")
        else:
            # parse the json string to a dict tpye 
            return json.loads(json_list[0])

def get_parser():
    """Get the change-merged hook parameters from command line"""
    parser = argparse.ArgumentParser(description = "Process a gerrit change.")
    parser.add_argument("--change", dest = "change_id")
    parser.add_argument("--change-url", dest = "change_url")
    parser.add_argument("--change-owner", dest = "change_owner")
    parser.add_argument("--project", dest = "project_name")
    parser.add_argument("--branch", dest = "branch_name")
    parser.add_argument("--submitter", dest = "change_submitter")
    parser.add_argument("--commit", dest = "commit_id")
    parser.add_argument("--newrev", dest = "newrev_id")
    return parser

def main():
    """Main function for the script"""
    import sys
    import pymysql

    parser = get_parser()
    args = parser.parse_args()
    if args.change_id is None:
        print(parser.print_help())
        sys.exit(1)
    else:
        print_args(args)
        change_dict = query_change(args.change_id)
        parse_json(change_dict)
        
        # Connect to the database
        conn = pymysql.connect(host='localhost',
                               user='testuser',
                               password='test623',
                               db='testdb',
                               charset='utf8mb4')
        
        # Check change owner, patchset uploader and approvals account info.
        account = Account(conn)
        account.check_user()
        
        # Insert new change, patchset and patchset approvals info.
        change = Change(conn)
        change.check_change()
        
        # Close connection to the database
        conn.close()
    
if __name__ == '__main__':
    main()
