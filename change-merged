#!/usr/bin/python3
#
# Catches information about a change whenever it been merged.
# Triggered by the gerrit change-merged hook. 
#
# The script assumes the following arguments:
# change-merged --change <change id> --change-url <change url> \
#     --change-owner <change owner> --project <project name> --branch <branch> \
#     --submitter <submitter> --commit <sha1> --newrev <sha1>

import subprocess
import sys
import json

from change import Change

def query_change(change_id):
    """ Get gerrit change info as a json list. """
    query_result = 'result.json'
    query_cmd = 'ssh -p 29418 cuixuejiao@101.201.39.57 gerrit query \
                    --files --format=JSON --current-patch-set %s > %s' \
                    % (change_id, query_result)
    try:
        subprocess.check_output(query_cmd,
                                stderr = subprocess.STDOUT,
                                shell = True)
    except subprocess.TimeoutExpired:
        print("Communication timeout expired.")
    else:
        try:
            with open(query_result) as f_obj:
                json_list = f_obj.readlines()
                # parse the json string to a dict tpye 
                # but what if this is a cherry-pick one?
                return json.loads(json_list[0])
        except FileNotFoundError:
            print("Sorry, the file " + query_result + " does not exist.")

def main():
    """Main function for the script"""
    import pymysql

    change_id = sys.argv[2]
    print(change_id)
    if change_id is None:
        sys.exit(1)
    else:
        change_dict = query_change(change_id)
        # Connect to the database
        conn = pymysql.connect(host='localhost',
                               user='testuser',
                               password='1212123',
                               db='testdb',
                               charset='utf8')
        # Insert new change, patchset and patchset approvals info.
        change = Change(conn, change_dict)
        change.check_change()
        # Close connection to the database
        conn.close()
    
if __name__ == '__main__':
    main()